#pragma once

#include <deque>
#include <algorithm>   // std::merge
#include <iterator>    // std::back_inserter
#include <functional> // std::ref (–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤)

template<class T, class Comp>
std::deque<T> Merge(const std::deque<T>& half1,
                    const std::deque<T>& half2,
                    const Comp& comparator)
{
    std::deque<T> result;
    // –°—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–ª–∏—è–Ω–∏–µ –¥–≤—É—Ö –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–≤
    std::merge(half1.begin(), half1.end(),
               half2.begin(), half2.end(),
               std::back_inserter(result),
               std::ref(comparator)); // üß™ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    return result;
}

template<class T, class Comp>
std::deque<T> MergeSort(const std::deque<T>& src,
                        const Comp& comparator)
{
    if (src.size() <= 1) {
        return src; // –±–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π
    }

    const auto mid_it = src.begin() + static_cast<std::ptrdiff_t>(src.size() / 2);

    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ª–µ–≤—É—é –∏ –ø—Ä–∞–≤—É—é —á–∞—Å—Ç–∏ (–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä—É—è –∏—Ö –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤)
    std::deque<T> left (src.begin(), mid_it);
    std::deque<T> right(mid_it,       src.end());

    left  = MergeSort(left,  comparator);
    right = MergeSort(right, comparator);

    // –°–ª–∏–≤–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª–æ–≤–∏–Ω—ã
    return Merge(left, right, comparator);
}
